generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = "***"
}

model article {
  id        Int      @id @default(autoincrement())
  pub_time  DateTime
  url       String
  thumbnail String?
  title     String
  content   String?
  publisher String
  author    String?
  issue_id  Int
  issue     issue    @relation(fields: [issue_id], references: [id])

  @@index([issue_id], name: "fk_article_issue1_idx")
}

model comment {
  id         Int       @id
  content    String
  is_deleted Int?
  post_id    Int
  user_id    Int?
  m_time     DateTime? @default(now())
  c_time     DateTime  @default(now())
  post       post      @relation(fields: [post_id], references: [id])
  user       user?     @relation(fields: [user_id], references: [id])

  @@index([post_id], name: "post_id")
  @@index([user_id], name: "user_id")
}

model issue {
  id               Int             @id @default(autoincrement())
  title            String?
  content          String?
  option_list_json String?
  m_time           DateTime        @default(now())
  c_time           DateTime        @default(now())
  is_published     Int             @default(0)
  article          article[]
  issue_has_tag    issue_has_tag[]
  post             post[]
  response         response[]
}

model issue_has_tag {
  issue_id Int
  tag_id   Int
  issue    issue @relation(fields: [issue_id], references: [id])
  tag      tag   @relation(fields: [tag_id], references: [id])

  @@id([issue_id, tag_id])
  @@index([issue_id], name: "fk_issue_has_tag_issue1_idx")
  @@index([tag_id], name: "fk_issue_has_tag_tag1_idx")
}

model post {
  id           Int       @id @default(autoincrement())
  c_time       DateTime  @default(now())
  m_time       DateTime? @default(now())
  is_deleted   Int?
  content      String
  author_id    Int
  issue_id     Int
  url          String?
  liked        Int       @default(0)
  exposed      Int       @default(0)
  clicked      Int       @default(0)
  user         user      @relation(fields: [author_id], references: [id])
  issue        issue     @relation(fields: [issue_id], references: [id])
  comment      comment[]

  @@index([issue_id], name: "fk_post_issue1_idx")
  @@index([author_id], name: "fk_post_user_idx")
}

model response {
  id       Int    @id @default(autoincrement())
  issue_id Int
  user_id  Int
  response String
  issue    issue  @relation(fields: [issue_id], references: [id])
  user     user   @relation(fields: [user_id], references: [id])

  @@index([issue_id], name: "fk_user_issue_response_issue1_idx")
  @@index([user_id], name: "fk_user_issue_response_user1_idx")
}

model tag {
  id            Int             @id @default(autoincrement())
  name          String
  type          String?
  issue_has_tag issue_has_tag[]
}

model user {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  birth_year   DateTime?
  sns          String?
  password     String
  role         Int            @default(1)
  pic_url      String?
  info         String?
  bio          String?
  comment      comment[]
  post         post[]
  response     response[]
}
