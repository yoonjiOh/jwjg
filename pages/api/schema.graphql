type User {
  id: ID!
  firebaseUID: String
  name: String
  intro: String
  profileImageUrl: String
  isAdmin: Int
  createdAt: DateTime
  updatedAt: DateTime
  userStance(issuesId: Int): UserStance
  opinionComments: [OpinionComment]
}

type UserStance {
  usersId: Int
  issuesId: Int
  stancesId: Int
  stances: [Stance]
}

type Opinion {
  id: Int
  content: String
  createdAt: DateTime
  usersId: Int
  issuesId: Int
  stancesId: Int
  user: User
  stance: Stance
  opinionComments: [OpinionComment]
  opinionReacts: [OpinionReact]
  opinionReactsSum: Int
}

type OpinionComment {
  id: Int
  content: String
  createdAt: DateTime
  usersId: Int
  opinionsId: Int
  stancesId: Int
  stance: Stance
  opinionCommentReacts: [OpinionCommentReact]
  user: User
}

type OpinionCommentReact {
  like: Int
  usersId: Int
  user: User
}

type OpinionReact {
  like: Int
  usersId: Int
  opinionsId: Int
}

type Issue {
  id: Int
  title: String!
  content: String!
  imageUrl: String
  isPublished: Int
  createdAt: DateTime
  updatedAt: DateTime
  # TODO(jurampark): adds user field
  opinions: [Opinion]
  issueHashTags: [IssueHashTag]
  stances: [Stance]
  userStances: [UserStance]
}

type Stance {
  id: Int
  title: String
  orderNum: Int
  issuesId: Int
  userStances: [UserStance]
}

type IssueHashTag {
  issuesId: Int
  hashTagsId: Int
  hashTags: [HashTag]
}

type HashTag {
  id: Int
  content: String
}

type AuthPayload {
  token: String
  user: User
}

# bulk insert 쿼리의 return 이 count 임
type bulkInsertCount {
  count: Int
}

input IssuesInput {
  title: String!
  content: String!
  option_list_json: String
}

input IssueHashTagInput {
  issue_id: Int
  tag_id: Int
}

input IssueStancesInput {
  title: String
  orderNum: Int
  IssueId: Int
}

type UploadedFileResponse {
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type Query {
  users: [User]
  user(id: Int!): User
  issue(id: Int!): Issue
  issues(id: Int): [Issue]
  opinions(id: Int): [Opinion]
  opinionsWithIssuesId(issuesId: Int): [Opinion]
  stances(id: Int): [Stance]
  stancesByIssueId(issuesId: Int): [Stance]
  opinionComments(id: Int): [OpinionComment]
  opinionComment(id: Int!): OpinionComment
  issueHashTags(id: Int): [IssueHashTag]
  hashTags(id: Int): [HashTag]
}

type Mutation {
  createIssue(
    title: String,
    content: String,
    imageUrl: String,
    option_list_json: String
  ): Issue!
  updateIssue(
    id: Int!
    title: String
    content: String
    imageUrl: String
    option_list_json: String
  ): Issue!
  createTagsByIssue(data: [IssueHashTagInput]): bulkInsertCount
  createStancesByIssue(data: [IssueStancesInput]): bulkInsertCount
  createUserStance(usersId: Int, issuesId: Int, stancesId: Int): UserStance
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  singleUpload(file: Upload!): UploadedFileResponse!
  createOpinion(content: String, usersId: Int!, issuesId: Int!, stancesId: Int!): Opinion
  createOpinionComment(content: String, usersId: Int!, opinionsId: Int!, stancesId: Int!): OpinionComment
  doLikeActionToOpinion(
    usersId: Int!,
    opinionsId: Int!,
    like: Boolean!
  ): OpinionReact
}

scalar DateTime
